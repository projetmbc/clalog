# NOTES.
#     1) Names followed by one star indicates an optional setting.
#     2) Special comments ''#: ... :#'' allow to use one small DSL
#        to indicate some constraints in the specifications.


# =================== #
# == GENERAL INFOS == #
# =================== #

gene*:
  institute*: Name of the author's insititute

# NOTES.
#     1) For the author, only the LAST NAME is mandatory.
#     2) Several FIRST NAMES can be indicated.
#     3) Several MAILS separated by comas can be used.
  author* : "First Name 1 ,
             Last Name
             [auth_email_1@provider.abc]"


# =================== #
# == ABBREVIATIONS == #
# =================== #

# WARNING.
#     Abbreviations can be defined as long as they do not conflict
#     with DSL macro commands for textbook entry, or with abbreviated
#     group names (see below).
abbrev*:
#: assert isid(ABBREV_1) :#
#: assert isid(ABBREV_2) :#
  ABBREV_1: full text of the abbreviation nb.1
  ABBREV_2: we can use abbreviation "\ABBREV_1" in another one


# ============ #
# == GROUPS == #
# ============ #

# WARNING.
#     Short names of groups must not conflict with DSL macro commands
#     for textbook entry.
group:
#: assert isid(MAIN_GRP_NAME) :#
#: assert isid(SUBGRP)        :#
  MAIN_GRP_NAME: full name of the group

#: if MAIN_GRP_NAME in group.keys() :#
  MAIN_GRP_NAME-SUBGRP: full name of the subgroupx


# ============= #
# == MANUALS == #
# ============= #

manual*:
#: if MAIN_GRP_NAME in group.keys() :#
  MAIN_GRP_NAME:
    - Title of the main, or single, manual used.
    - You can indicate several manuals for the same group.


# =============== #
# == DOCUMENTS == #
# =============== #

folder*:
#: if MAIN_GRP_NAME in group.keys() :#
  MAIN_GRP_NAME: relative path to the folder containing the documents
                 referenced in the scholar textbook, the path being
                 relative to the folder containing this ''cgf.yaml''.


# ============== #
# == SCHEDULE == #
# ============== #

schedule:
# NOTE: the use of ''[week {WEEK_ID}]'' is only for mandotatory use
# cases regarding to the schedule.
#
#: assert isdate(DAY, "{day_name}") :#
#
#: assert isdate(START_TIME, ["{hour}h{min}", "{hour}h"]) :#
#: assert isdate(END_TIME  , ["{hour}h{min}", "{hour}h"]) :#
#
#: assert WEEK_ID in dates.weeks.keys() :#
  DAY*:
    "{START_TIME}  .. {END_TIME} [week {WEEK_ID}]": SNT


# ============= #
# == PERIODS == #
# ============= #

dates:
#: assert isdate(START_DATE, "{month}-{day}") :#
#: assert isdate(END_DATE  , "{month}-{day}") :#
  start: START_DATE
  end  : END_DATE

# There is no restriction on the number of special aletrantive weeks.
#
#: assert isdate(START_1ST_WEEK_ID_A, "{month}-{day}") :#
#: assert isdate(START_1ST_WEEK_ID_B, "{month}-{day}") :#
#
#: assert isid(ID_A) :#
#: assert isid(ID_B) :#
  weeks*:
    ID_A: START_1ST_WEEK_ID_A
    ID_B: START_1ST_WEEK_ID_B

# There is no restriction on the number of holidays.
#
#: assert isdate(START_HOLIDAYS, "{month}-{day}") :#
#: assert isdate(END_HOLIDAYS  , "{month}-{day}") :#
  holidays*:
    "Full name of the holidays": START_HOLIDAYS .. END_HOLIDAYS
